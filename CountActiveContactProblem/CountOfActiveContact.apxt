/*trigger CountOfActiveContact on Contact (after insert, after update, after delete, after undelete) {
    switch on Trigger.operationType {
        when AFTER_INSERT {
            for(Contact con: Trigger.new) {

                if(String.isNotBlank(con.AccountId)) {    
                    String accountId = con.AccountId;
                    List<AggregateResult> results = [
                        SELECT AccountId, COUNT(Id) totalContacts 
                        FROM Contact
                        WHERE Active__c = TRUE AND AccountId = :accountId
                        GROUP BY AccountId
                    ];
                    for(AggregateResult result : results) {
                        
                        String accId = String.valueOf(result.get('AccountId'));
                        Integer totalContacts = Integer.valueOf(result.get('totalContacts'));
                        
                        Account acc = new Account();
                        acc.Id = accId;
                        acc.Active_Contacts__c = totalContacts;
                        UPDATE acc;
                    }
                } 
            }
        }
    } 
}*/

//optimize code using set
trigger CountOfActiveContact on Contact (after insert, after update, after delete, after undelete) {
    switch on Trigger.operationType {
        when AFTER_INSERT {
            Set<Id> accountIds = new Set<Id>();
            for(Contact con: Trigger.new) {
                if(String.isNotBlank(con.AccountId)) {
                    accountIds.add(con.AccountId);
                }
            }
            
            List<AggregateResult> results = [
                SELECT AccountId, COUNT(Id) totalContacts 
                FROM Contact
                WHERE Active__c = TRUE AND AccountId IN:accountIds
                GROUP BY AccountId
            ];
            List<Account> accountsToUpdate = new List<Account>();
            for(AggregateResult result : results) {
                
                String accId = String.valueOf(result.get('AccountId'));
                Integer totalContacts = Integer.valueOf(result.get('totalContacts'));
                
                Account acc = new Account();
                acc.Id = accId;
                acc.Active_Contacts__c = totalContacts;
                accountsToUpdate.add(acc);
            }
            Update accountsToUpdate;
        }
        
        When AFTER_UPDATE {
            Set<Id> accountIds = new Set<Id>();
            for(Contact con: Trigger.new) {
                //capture the account id only if active checkbox value if flipped
                if(String.isNotBlank(con.AccountId) && Trigger.oldMap.get(con.Id).Active__c != con.Active__c) {
                    accountIds.add(con.AccountId);
                }else if(Trigger.oldMap.get(con.Id).AccountId != con.AccountId) {
                    accountIds.add(con.AccountId);
                    accountIds.add(Trigger.oldMap.get(con.Id).AccountId);
                }
            }
            //get aggregate result for all accounts
            List<AggregateResult> results = [
                SELECT AccountId, COUNT(Id) totalContacts 
                FROM Contact
                WHERE Active__c = TRUE AND AccountId IN:accountIds
                GROUP BY AccountId
            ];
            //build final list of accounts to update
            List<Account> accountsToUpdate = new List<Account>();
            for(AggregateResult result : results) {
                //get account ID and number of active contacts
                String accId = String.valueOf(result.get('AccountId'));
                Integer totalContacts = Integer.valueOf(result.get('totalContacts'));
                //make sure you use id feild in your account to update it
                Account acc = new Account();
                acc.Id = accId;
                acc.Active_Contacts__c = totalContacts;
                accountsToUpdate.add(acc);
            }
            Update accountsToUpdate;
        }
    } 
}



